{"ast":null,"code":"var _jsxFileName = \"C:\\\\typing_trainer\\\\src\\\\component\\\\Keyboard.jsx\";\nimport React, { Component } from \"react\";\nimport \"./styles.scss\";\nimport { vocabulary } from \"../contans\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Keyboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setUp = () => {\n      let arrayVocabulary = [];\n      let vocabularyAmount = 100;\n      let vocabularyLength = vocabulary.length;\n      let random, quote;\n\n      for (var i = 0; i <= vocabularyAmount; i++) {\n        random = Math.floor(Math.random() * vocabularyLength);\n        quote = vocabulary[random];\n        arrayVocabulary.push(quote);\n      }\n\n      this.setState({\n        arrayVocabulary: arrayVocabulary\n      });\n    };\n\n    this.typing = () => {\n      let count = 0;\n      let arrayQuote = document.querySelectorAll(\"span\");\n      let arrayQuoteLength = arrayQuote.length;\n      const quote_input = document.getElementById(\"quote_input\"); // arrayQuote[count].classList.add(\"text_active\");\n\n      quote_input.addEventListener(\"keyup\", function (e) {\n        if (quote_input.value) {\n          if (e.key == \" \") {\n            let arrayValue = quote_input.value.toString().trim();\n\n            if (arrayValue == arrayQuote[count].innerText) {\n              arrayQuote[count].classList.add(\"correct\");\n            } else {\n              arrayQuote[count].classList.add(\"incorrect\");\n            }\n\n            arrayQuote[count].classList.remove(\"text_active\");\n            count++;\n            quote_input.value = \"\";\n            arrayQuote[count].classList.add(\"text_active\");\n          }\n        }\n\n        if (count === arrayQuoteLength) {\n          quote_input.readOnly = true;\n          arrayQuote[count].classList.remove(\"text_active\");\n        }\n      });\n    };\n\n    this.state = {\n      arrayVocabulary: [],\n      quoteEN: \"scale OOP java constructor \"\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"render\");\n    this.setUp();\n  }\n\n  componentDidUpdate() {\n    this.typing();\n  }\n\n  render() {\n    let arrayRender = this.state.arrayVocabulary;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"quote_render\",\n        children: Array.isArray(arrayRender) && arrayRender.length > 0 && arrayRender.map((item, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 46\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"quote_input\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Keyboard;","map":{"version":3,"names":["React","Component","vocabulary","Keyboard","constructor","props","setUp","arrayVocabulary","vocabularyAmount","vocabularyLength","length","random","quote","i","Math","floor","push","setState","typing","count","arrayQuote","document","querySelectorAll","arrayQuoteLength","quote_input","getElementById","addEventListener","e","value","key","arrayValue","toString","trim","innerText","classList","add","remove","readOnly","state","quoteEN","componentDidMount","console","log","componentDidUpdate","render","arrayRender","Array","isArray","map","item","index"],"sources":["C:/typing_trainer/src/component/Keyboard.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./styles.scss\";\r\nimport { vocabulary } from \"../contans\";\r\n\r\nclass Keyboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrayVocabulary: [],\r\n      quoteEN: \"scale OOP java constructor \",\r\n    };\r\n  }\r\n  setUp = () => {\r\n    let arrayVocabulary = [];\r\n    let vocabularyAmount = 100;\r\n    let vocabularyLength = vocabulary.length;\r\n    let random, quote;\r\n    for (var i = 0; i <= vocabularyAmount; i++) {\r\n      random = Math.floor(Math.random() * vocabularyLength);\r\n      quote = vocabulary[random];\r\n      arrayVocabulary.push(quote);\r\n    }\r\n    this.setState({\r\n      arrayVocabulary: arrayVocabulary,\r\n    });\r\n  };\r\n  typing = () => {\r\n    let count = 0;\r\n    let arrayQuote = document.querySelectorAll(\"span\");\r\n    let arrayQuoteLength = arrayQuote.length;\r\n    const quote_input = document.getElementById(\"quote_input\");\r\n    // arrayQuote[count].classList.add(\"text_active\");\r\n    quote_input.addEventListener(\"keyup\", function (e) {\r\n      if (quote_input.value) {\r\n        if (e.key == \" \") {\r\n          let arrayValue = quote_input.value.toString().trim();\r\n          if (arrayValue == arrayQuote[count].innerText) {\r\n            arrayQuote[count].classList.add(\"correct\");\r\n          } else {\r\n            arrayQuote[count].classList.add(\"incorrect\");\r\n          }\r\n          arrayQuote[count].classList.remove(\"text_active\");\r\n          count++;\r\n          quote_input.value = \"\";\r\n          arrayQuote[count].classList.add(\"text_active\");\r\n        }\r\n      }\r\n      if (count === arrayQuoteLength) {\r\n        quote_input.readOnly = true;\r\n        arrayQuote[count].classList.remove(\"text_active\");\r\n      }\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    console.log(\"render\");\r\n    this.setUp();\r\n  }\r\n  componentDidUpdate() {\r\n    this.typing();\r\n  }\r\n  render() {\r\n    let arrayRender = this.state.arrayVocabulary;\r\n    return (\r\n      <div className=\"keyboard\">\r\n        <div id=\"quote_render\">\r\n          {Array.isArray(arrayRender) &&\r\n            arrayRender.length > 0 &&\r\n            arrayRender.map((item, index) => <span key={index}>{item}</span>)}\r\n        </div>\r\n        <input id=\"quote_input\" type=\"text\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}