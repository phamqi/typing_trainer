{"ast":null,"code":"var _jsxFileName = \"C:\\\\typing_trainer\\\\src\\\\component\\\\Typing.jsx\";\nimport React, { Component } from \"react\";\nimport \"./styles.scss\";\nimport GetWord from \"./GetWord\";\nimport { countdown, rsIcon, defaultFontSize } from \"../constant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Typing extends Component {\n  constructor(props) {\n    super(props);\n\n    this.startTimer = () => {\n      this.setState({\n        start: false\n      });\n      const timer = setInterval(() => {\n        if (this.state.counter == 0) {\n          clearInterval(timer);\n          this.props.result(this.state.initValue);\n        } else {\n          this.setState(prevState => {\n            return {\n              counter: prevState.counter - 1\n            };\n          });\n        }\n      }, 1000);\n      this.setState({\n        timer: timer\n      });\n    };\n\n    this.endWhenMax = stringInArrears => {\n      clearInterval(this.state.timer);\n      let string = this.state.initValue.stringInput + stringInArrears;\n      let result = { ...this.state.initValue,\n        stringInput: string\n      };\n      this.props.result(result);\n    };\n\n    this.initWords = () => {\n      clearInterval(this.state.timer);\n    };\n\n    this.typing = () => {\n      const typing__render__char = document.getElementById(\"typing__render__char\");\n      const arrayChar = document.querySelectorAll(\"span.typing__char\");\n      const typing_input = document.getElementById(\"typing__input\");\n      typing__render__char.style.transform = \"translate(0px)\";\n      arrayChar.forEach(item => {\n        item.classList.remove(\"incorrect\", \"correct\", \"text_active\");\n      });\n      typing_input.focus();\n      typing_input.value = \"\";\n      typing_input.readOnly = false;\n      this.getElementTranslate();\n      const arrayCharLength = arrayChar.length;\n      arrayChar[this.state.initValue.count].classList.add(\"text_active\");\n      typing_input.addEventListener(\"keypress\", e => {\n        if (this.state.start) {\n          this.startTimer();\n        }\n\n        this.setState(prevState => ({\n          initValue: { ...prevState.initValue,\n            keystrokes: prevState.initValue.keystrokes + 1\n          }\n        }));\n\n        if (typing_input.value) {\n          if (e.key == \" \") {\n            let arrayValue = typing_input.value.toString().trim();\n            let stringInput = typing_input.value;\n            this.setState(prevState => ({\n              initValue: { ...prevState.initValue,\n                stringInput: prevState.initValue.stringInput + stringInput\n              }\n            }));\n\n            if (arrayValue == arrayChar[this.state.initValue.count].innerText) {\n              arrayChar[this.state.initValue.count].classList.add(\"correct\");\n              this.setState(prevState => ({\n                initValue: { ...prevState.initValue,\n                  correct: prevState.initValue.correct + 1\n                }\n              }));\n            } else {\n              arrayChar[this.state.initValue.count].classList.add(\"incorrect\");\n              this.setState(prevState => ({\n                initValue: { ...prevState.initValue,\n                  wrong: prevState.initValue.wrong + 1\n                }\n              }));\n            }\n\n            console.log(\"alo alo\", this.state.translateWhenElement);\n\n            if (this.state.initValue.count >= this.state.translateWhenElement) {\n              let plus = arrayChar[this.state.initValue.count].clientWidth;\n              this.setState(prevState => ({\n                initValue: { ...prevState.initValue,\n                  traslateValue: prevState.initValue.traslateValue + plus\n                }\n              }));\n              typing__render__char.style.transform = `translateX(-${this.state.initValue.traslateValue}px)`;\n            }\n\n            if (this.state.initValue.count == arrayCharLength - 1) {\n              arrayChar[this.state.initValue.count].classList.remove(\"text_active\");\n              this.endWhenMax(typing_input.value);\n              typing_input.readOnly = true;\n              const rsValue = {\n                count: 0,\n                keystrokes: 0,\n                traslateValue: 0,\n                stringInput: \"\"\n              };\n              this.setState({\n                initValue: rsValue\n              });\n            } else {\n              arrayChar[this.state.initValue.count].classList.remove(\"text_active\");\n              arrayChar[this.state.initValue.count + 1].classList.add(\"text_active\");\n              this.setState(prevState => ({\n                initValue: { ...prevState.initValue,\n                  count: prevState.initValue.count + 1\n                }\n              }));\n            }\n\n            typing_input.value = \"\";\n          }\n        }\n      });\n    };\n\n    this.getElementTranslate = () => {\n      const render__typing = document.getElementById(\"typing__render\");\n      const span__typing = document.getElementById(\"typing__char\");\n      const translateWhenElement = Math.floor(render__typing.clientWidth / 2 / span__typing.clientWidth) - 1;\n      this.setState({\n        translateWhenElement: translateWhenElement\n      });\n    };\n\n    this.fontSize = e => {\n      this.getElementTranslate();\n\n      if (e.key == \"ArrowUp\") {\n        if (!isNaN(e.target.value)) {\n          if (e.target.value < 60) {\n            this.setState(prevState => ({\n              fontSize: prevState.fontSize + 1\n            }));\n          }\n        }\n      }\n\n      if (e.key == \"ArrowDown\") {\n        if (!isNaN(e.target.value)) {\n          if (e.target.value > 14) {\n            this.setState(prevState => ({\n              fontSize: prevState.fontSize - 1\n            }));\n          }\n        }\n      }\n    };\n\n    this.setLanguage = () => {\n      console.log(\"in fnc 1\", this.state.VN);\n\n      if (this.state.VN === \"VN\") {\n        this.setState({\n          VN: \"EN\"\n        });\n      }\n\n      if (this.state.VN === \"EN\") {\n        this.setState({\n          VN: \"VN\"\n        });\n      }\n\n      this.setUp();\n      console.log(\"in fnc 2\", this.state.VN);\n    };\n\n    this.state = {\n      arrayWords: [],\n      counter: countdown,\n      start: true,\n      ready: false,\n      initValue: {\n        count: 0,\n        keystrokes: 0,\n        traslateValue: 0,\n        stringInput: \"\",\n        correct: 1,\n        wrong: 1\n      },\n      fontSize: defaultFontSize,\n      translateWhenElement: 0,\n      VN: true\n    };\n    this.setUp = this.setUp.bind(this);\n  }\n\n  async setUp() {\n    await this.initWords();\n\n    if (this.state.ready) {\n      this.typing(0, 0, 0, \"\");\n    }\n  }\n\n  componentDidMount() {\n    this.setUp();\n    console.log(\"compoennt didmout\", this.state.VN);\n  }\n\n  componentDidUpdate() {}\n\n  render() {\n    const {\n      loading,\n      data\n    } = GetWord(this.state.VN);\n\n    if (!loading) {\n      this.setState(prevState => ({ ...prevState,\n        arrayWords: data,\n        counter: countdown,\n        start: true,\n        ready: true,\n        initValue: {\n          count: 0,\n          keystrokes: 0,\n          traslateValue: 0,\n          stringInput: \"\",\n          correct: 1,\n          wrong: 1\n        }\n      }));\n    } else {\n      console.log(\"dang load\");\n    }\n\n    let arrayWordsRender = this.state.arrayWords;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing\",\n      style: {\n        \"--fontSize\": `${this.state.fontSize}px`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setLanguage(),\n        className: \"typing__language\",\n        children: this.state.VN\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input__size\",\n        type: \"number\",\n        className: \"typing__size\",\n        value: this.state.fontSize,\n        onChange: function () {},\n        onKeyDown: e => {\n          this.fontSize(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"typing__render\",\n        className: \"typing__render\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"typing__render__char\",\n          className: \"typing__render__char\",\n          children: Array.isArray(arrayWordsRender) && arrayWordsRender.length > 0 && arrayWordsRender.map((item, index) => index === 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n            id: \"typing__char\",\n            className: \"typing__char\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"typing__char\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing__action\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"typing__input\",\n          className: \"typing__action__input\",\n          type: \"text\",\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing__action__counter\",\n          children: this.state.counter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"typing__action__btn__restart\",\n          onClick: () => this.setUp(),\n          children: rsIcon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Typing;","map":{"version":3,"names":["React","Component","GetWord","countdown","rsIcon","defaultFontSize","Typing","constructor","props","startTimer","setState","start","timer","setInterval","state","counter","clearInterval","result","initValue","prevState","endWhenMax","stringInArrears","string","stringInput","initWords","typing","typing__render__char","document","getElementById","arrayChar","querySelectorAll","typing_input","style","transform","forEach","item","classList","remove","focus","value","readOnly","getElementTranslate","arrayCharLength","length","count","add","addEventListener","e","keystrokes","key","arrayValue","toString","trim","innerText","correct","wrong","console","log","translateWhenElement","plus","clientWidth","traslateValue","rsValue","render__typing","span__typing","Math","floor","fontSize","isNaN","target","setLanguage","VN","setUp","arrayWords","ready","bind","componentDidMount","componentDidUpdate","render","loading","data","arrayWordsRender","Array","isArray","map","index"],"sources":["C:/typing_trainer/src/component/Typing.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./styles.scss\";\r\nimport GetWord from \"./GetWord\";\r\nimport { countdown, rsIcon, defaultFontSize } from \"../constant\";\r\n\r\nclass Typing extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrayWords: [],\r\n      counter: countdown,\r\n      start: true,\r\n      ready: false,\r\n      initValue: {\r\n        count: 0,\r\n        keystrokes: 0,\r\n        traslateValue: 0,\r\n        stringInput: \"\",\r\n        correct: 1,\r\n        wrong: 1,\r\n      },\r\n      fontSize: defaultFontSize,\r\n      translateWhenElement: 0,\r\n      VN: true,\r\n    };\r\n    this.setUp = this.setUp.bind(this);\r\n  }\r\n  startTimer = () => {\r\n    this.setState({\r\n      start: false,\r\n    });\r\n    const timer = setInterval(() => {\r\n      if (this.state.counter == 0) {\r\n        clearInterval(timer);\r\n        this.props.result(this.state.initValue);\r\n      } else {\r\n        this.setState((prevState) => {\r\n          return { counter: prevState.counter - 1 };\r\n        });\r\n      }\r\n    }, 1000);\r\n    this.setState({\r\n      timer: timer,\r\n    });\r\n  };\r\n  endWhenMax = (stringInArrears) => {\r\n    clearInterval(this.state.timer);\r\n    let string = this.state.initValue.stringInput + stringInArrears;\r\n    let result = { ...this.state.initValue, stringInput: string };\r\n    this.props.result(result);\r\n  };\r\n  initWords = () => {\r\n    clearInterval(this.state.timer);\r\n  };\r\n  typing = () => {\r\n    const typing__render__char = document.getElementById(\r\n      \"typing__render__char\"\r\n    );\r\n    const arrayChar = document.querySelectorAll(\"span.typing__char\");\r\n    const typing_input = document.getElementById(\"typing__input\");\r\n\r\n    typing__render__char.style.transform = \"translate(0px)\";\r\n    arrayChar.forEach((item) => {\r\n      item.classList.remove(\"incorrect\", \"correct\", \"text_active\");\r\n    });\r\n    typing_input.focus();\r\n    typing_input.value = \"\";\r\n    typing_input.readOnly = false;\r\n\r\n    this.getElementTranslate();\r\n    const arrayCharLength = arrayChar.length;\r\n\r\n    arrayChar[this.state.initValue.count].classList.add(\"text_active\");\r\n    typing_input.addEventListener(\"keypress\", (e) => {\r\n      if (this.state.start) {\r\n        this.startTimer();\r\n      }\r\n      this.setState((prevState) => ({\r\n        initValue: {\r\n          ...prevState.initValue,\r\n          keystrokes: prevState.initValue.keystrokes + 1,\r\n        },\r\n      }));\r\n      if (typing_input.value) {\r\n        if (e.key == \" \") {\r\n          let arrayValue = typing_input.value.toString().trim();\r\n          let stringInput = typing_input.value;\r\n          this.setState((prevState) => ({\r\n            initValue: {\r\n              ...prevState.initValue,\r\n              stringInput: prevState.initValue.stringInput + stringInput,\r\n            },\r\n          }));\r\n          if (arrayValue == arrayChar[this.state.initValue.count].innerText) {\r\n            arrayChar[this.state.initValue.count].classList.add(\"correct\");\r\n            this.setState((prevState) => ({\r\n              initValue: {\r\n                ...prevState.initValue,\r\n                correct: prevState.initValue.correct + 1,\r\n              },\r\n            }));\r\n          } else {\r\n            arrayChar[this.state.initValue.count].classList.add(\"incorrect\");\r\n            this.setState((prevState) => ({\r\n              initValue: {\r\n                ...prevState.initValue,\r\n                wrong: prevState.initValue.wrong + 1,\r\n              },\r\n            }));\r\n          }\r\n          console.log(\"alo alo\", this.state.translateWhenElement);\r\n          if (this.state.initValue.count >= this.state.translateWhenElement) {\r\n            let plus = arrayChar[this.state.initValue.count].clientWidth;\r\n            this.setState((prevState) => ({\r\n              initValue: {\r\n                ...prevState.initValue,\r\n                traslateValue: prevState.initValue.traslateValue + plus,\r\n              },\r\n            }));\r\n            typing__render__char.style.transform = `translateX(-${this.state.initValue.traslateValue}px)`;\r\n          }\r\n          if (this.state.initValue.count == arrayCharLength - 1) {\r\n            arrayChar[this.state.initValue.count].classList.remove(\r\n              \"text_active\"\r\n            );\r\n            this.endWhenMax(typing_input.value);\r\n            typing_input.readOnly = true;\r\n            const rsValue = {\r\n              count: 0,\r\n              keystrokes: 0,\r\n              traslateValue: 0,\r\n              stringInput: \"\",\r\n            };\r\n            this.setState({\r\n              initValue: rsValue,\r\n            });\r\n          } else {\r\n            arrayChar[this.state.initValue.count].classList.remove(\r\n              \"text_active\"\r\n            );\r\n            arrayChar[this.state.initValue.count + 1].classList.add(\r\n              \"text_active\"\r\n            );\r\n            this.setState((prevState) => ({\r\n              initValue: {\r\n                ...prevState.initValue,\r\n                count: prevState.initValue.count + 1,\r\n              },\r\n            }));\r\n          }\r\n          typing_input.value = \"\";\r\n        }\r\n      }\r\n    });\r\n  };\r\n  getElementTranslate = () => {\r\n    const render__typing = document.getElementById(\"typing__render\");\r\n    const span__typing = document.getElementById(\"typing__char\");\r\n    const translateWhenElement =\r\n      Math.floor(render__typing.clientWidth / 2 / span__typing.clientWidth) - 1;\r\n    this.setState({\r\n      translateWhenElement: translateWhenElement,\r\n    });\r\n  };\r\n  fontSize = (e) => {\r\n    this.getElementTranslate();\r\n    if (e.key == \"ArrowUp\") {\r\n      if (!isNaN(e.target.value)) {\r\n        if (e.target.value < 60) {\r\n          this.setState((prevState) => ({\r\n            fontSize: prevState.fontSize + 1,\r\n          }));\r\n        }\r\n      }\r\n    }\r\n    if (e.key == \"ArrowDown\") {\r\n      if (!isNaN(e.target.value)) {\r\n        if (e.target.value > 14) {\r\n          this.setState((prevState) => ({\r\n            fontSize: prevState.fontSize - 1,\r\n          }));\r\n        }\r\n      }\r\n    }\r\n  };\r\n  async setUp() {\r\n    await this.initWords();\r\n    if (this.state.ready) {\r\n      this.typing(0, 0, 0, \"\");\r\n    }\r\n  }\r\n  setLanguage = () => {\r\n    console.log(\"in fnc 1\", this.state.VN);\r\n    if (this.state.VN === \"VN\") {\r\n      this.setState({\r\n        VN: \"EN\",\r\n      });\r\n    }\r\n    if (this.state.VN === \"EN\") {\r\n      this.setState({\r\n        VN: \"VN\",\r\n      });\r\n    }\r\n    this.setUp();\r\n    console.log(\"in fnc 2\", this.state.VN);\r\n  };\r\n  componentDidMount() {\r\n    this.setUp();\r\n    console.log(\"compoennt didmout\", this.state.VN);\r\n  }\r\n  componentDidUpdate() {}\r\n  render() {\r\n    const { loading, data } = GetWord(this.state.VN);\r\n    if (!loading) {\r\n      this.setState((prevState) => ({\r\n        ...prevState,\r\n        arrayWords: data,\r\n        counter: countdown,\r\n        start: true,\r\n        ready: true,\r\n        initValue: {\r\n          count: 0,\r\n          keystrokes: 0,\r\n          traslateValue: 0,\r\n          stringInput: \"\",\r\n          correct: 1,\r\n          wrong: 1,\r\n        },\r\n      }));\r\n    } else {\r\n      console.log(\"dang load\");\r\n    }\r\n    let arrayWordsRender = this.state.arrayWords;\r\n\r\n    return (\r\n      <div\r\n        className=\"typing\"\r\n        style={{ \"--fontSize\": `${this.state.fontSize}px` }}\r\n      >\r\n        <button onClick={() => this.setLanguage()} className=\"typing__language\">\r\n          {this.state.VN}\r\n        </button>\r\n        <input\r\n          id=\"input__size\"\r\n          type=\"number\"\r\n          className=\"typing__size\"\r\n          value={this.state.fontSize}\r\n          onChange={function () {}}\r\n          onKeyDown={(e) => {\r\n            this.fontSize(e);\r\n          }}\r\n        />\r\n        <div id=\"typing__render\" className=\"typing__render\">\r\n          <div id=\"typing__render__char\" className=\"typing__render__char\">\r\n            {Array.isArray(arrayWordsRender) &&\r\n              arrayWordsRender.length > 0 &&\r\n              arrayWordsRender.map((item, index) =>\r\n                index === 0 ? (\r\n                  <span id=\"typing__char\" className=\"typing__char\" key={index}>\r\n                    {item}\r\n                  </span>\r\n                ) : (\r\n                  <span className=\"typing__char\" key={index}>\r\n                    {item}\r\n                  </span>\r\n                )\r\n              )}\r\n          </div>\r\n        </div>\r\n        <div className=\"typing__action\">\r\n          <input\r\n            id=\"typing__input\"\r\n            className=\"typing__action__input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n          />\r\n          <div className=\"typing__action__counter\">{this.state.counter}</div>\r\n          <button\r\n            className=\"typing__action__btn__restart\"\r\n            onClick={() => this.setUp()}\r\n          >\r\n            {rsIcon}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Typing;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}