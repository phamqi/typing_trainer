{"ast":null,"code":"var _jsxFileName = \"C:\\\\typing_trainer\\\\src\\\\component\\\\Typing.jsx\";\nimport React, { Component } from \"react\";\nimport \"./styles.scss\";\nimport { words, wordsAmount, countdown, rsIcon, defaultFontSize } from \"../constant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Typing extends Component {\n  constructor(props) {\n    super(props);\n\n    this.startTimer = () => {\n      this.setState({\n        start: false\n      });\n      const timer = setInterval(() => {\n        if (this.state.counter == 0) {\n          clearInterval(timer);\n          this.props.result(this.state.initValue);\n        } else {\n          this.setState(prevState => {\n            return {\n              counter: prevState.counter - 1\n            };\n          });\n        }\n      }, 1000);\n      this.setState({\n        timer: timer\n      });\n    };\n\n    this.endWhenMax = stringInArrears => {\n      clearInterval(this.state.timer);\n      let string = this.state.initValue.stringInput + stringInArrears;\n      let result = { ...this.state.initValue,\n        stringInput: string\n      };\n      this.props.result(result);\n    };\n\n    this.createWordsArray = () => {\n      clearInterval(this.state.timer);\n      this.setState({\n        ready: false\n      });\n      const arrayWords = [];\n      const wordsByLanguage = this.state.VN ? words.VN : words.EN;\n      const wordsLength = wordsByLanguage.length;\n\n      for (var i = 0; i < wordsAmount; i++) {\n        const random = Math.floor(Math.random() * wordsLength);\n        const word = wordsByLanguage[random];\n        arrayWords.push(word);\n      }\n\n      this.setState(prevState => ({ ...prevState,\n        arrayWords: arrayWords,\n        counter: countdown,\n        start: true,\n        ready: true,\n        initValue: {\n          count: 0,\n          keystrokes: 0,\n          traslateValue: 0,\n          stringInput: \"\",\n          correct: 1,\n          wrong: 1\n        }\n      }));\n      this.declareAndResetClass();\n    };\n\n    this.declareAndResetClass = () => {\n      const typing__render__char = document.getElementById(\"typing__render__char\");\n      const arrayChar = document.querySelectorAll(\"span.typing__char\");\n      const typing_input = document.getElementById(\"typing__input\");\n      typing__render__char.style.transform = \"translate(0px)\";\n      arrayChar.forEach((item, index) => {\n        if (index === 0) {\n          item.classList.add(\"text__active\");\n          item.classList.remove(\"incorrect\", \"correct\");\n        } else {\n          item.classList.remove(\"incorrect\", \"correct\", \"text__active\");\n        }\n      });\n      typing_input.focus();\n      typing_input.value = \"\";\n      typing_input.readOnly = false;\n      return {\n        typing_input,\n        arrayChar,\n        typing__render__char\n      };\n    };\n\n    this.typing = () => {\n      const {\n        typing_input,\n        arrayChar,\n        typing__render__char\n      } = this.declareAndResetClass();\n      const arrayCharLength = wordsAmount;\n      this.getElementTranslate();\n\n      const inputKeypress = e => {\n        if (this.state.start) {\n          this.startTimer();\n        }\n\n        this.setState(prevState => ({\n          initValue: { ...prevState.initValue,\n            keystrokes: prevState.initValue.keystrokes + 1\n          }\n        }));\n\n        if (typing_input.value) {\n          if (e.key === \" \") {\n            let arrayValue = typing_input.value.toString().trim();\n\n            if (arrayValue === arrayChar[this.state.initValue.count].innerText) {\n              arrayChar[this.state.initValue.count].classList.add(\"correct\");\n              this.setState(prevState => ({\n                initValue: { ...prevState.initValue,\n                  correct: prevState.initValue.correct + 1\n                }\n              }));\n            } else {\n              arrayChar[this.state.initValue.count].classList.add(\"incorrect\");\n              this.setState(prevState => ({\n                initValue: { ...prevState.initValue,\n                  wrong: prevState.initValue.wrong + 1\n                }\n              }));\n            }\n\n            arrayChar[this.state.initValue.count].classList.remove(\"text__active\");\n            arrayChar[this.state.initValue.count + 1].classList.add(\"text__active\");\n            let stringInput = typing_input.value;\n            this.setState(prevState => ({\n              initValue: { ...prevState.initValue,\n                stringInput: prevState.initValue.stringInput + stringInput\n              }\n            }));\n\n            if (this.state.initValue.count >= this.state.translateWhenElement) {\n              let plus = arrayChar[this.state.initValue.count].clientWidth;\n              this.setState(prevState => ({\n                initValue: { ...prevState.initValue,\n                  traslateValue: prevState.initValue.traslateValue + plus\n                }\n              }));\n              typing__render__char.style.transform = `translateX(-${this.state.initValue.traslateValue}px)`;\n            }\n\n            if (this.state.initValue.count === arrayCharLength - 1) {\n              this.endWhenMax(typing_input.value);\n              typing_input.readOnly = true;\n              const rsValue = {\n                count: 0,\n                keystrokes: 0,\n                traslateValue: 0,\n                stringInput: \"\"\n              };\n              this.setState({\n                initValue: rsValue\n              });\n            } else {\n              this.setState(prevState => ({\n                initValue: { ...prevState.initValue,\n                  count: prevState.initValue.count + 1\n                }\n              }));\n            }\n\n            typing_input.value = \"\";\n          }\n        }\n      };\n\n      typing_input.removeEventListener(\"keypress\", inputKeypress);\n      typing_input.addEventListener(\"keypress\", inputKeypress);\n    };\n\n    this.getElementTranslate = () => {\n      const render__typing = document.getElementById(\"typing__render\");\n      const span__typing = document.getElementById(\"typing__char\");\n      const translateWhenElement = Math.floor(render__typing.clientWidth / 2 / span__typing.clientWidth) - 1;\n      this.setState({\n        translateWhenElement: translateWhenElement\n      });\n    };\n\n    this.fontSize = e => {\n      this.getElementTranslate();\n\n      if (e.key === \"ArrowUp\") {\n        if (!isNaN(e.target.value)) {\n          if (e.target.value < 60) {\n            this.setState(prevState => ({\n              fontSize: prevState.fontSize + 1\n            }));\n          }\n        }\n      }\n\n      if (e.key === \"ArrowDown\") {\n        if (!isNaN(e.target.value)) {\n          if (e.target.value > 14) {\n            this.setState(prevState => ({\n              fontSize: prevState.fontSize - 1\n            }));\n          }\n        }\n      }\n    };\n\n    this.setLanguage = () => {\n      this.setState(prevState => ({\n        VN: !prevState.VN\n      }));\n      this.createWordsArray();\n    };\n\n    this.state = {\n      arrayWords: [],\n      counter: countdown,\n      start: true,\n      ready: false,\n      initValue: {\n        count: 0,\n        keystrokes: 0,\n        traslateValue: 0,\n        stringInput: \"\",\n        correct: 1,\n        wrong: 1\n      },\n      fontSize: defaultFontSize,\n      translateWhenElement: 0,\n      VN: true\n    };\n    this.setUp = this.setUp.bind(this);\n  }\n\n  async setUp() {\n    await this.createWordsArray();\n\n    if (this.state.ready) {\n      this.typing();\n    }\n  }\n\n  componentDidMount() {\n    this.setUp();\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    const arrayWordsRender = this.state.arrayWords;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing\",\n      style: {\n        \"--fontSize\": `${this.state.fontSize}px`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.setLanguage,\n        className: \"typing__language\",\n        children: this.state.VN ? \"VN\" : \"EN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input__size\",\n        type: \"number\",\n        className: \"typing__size\",\n        value: this.state.fontSize,\n        onChange: function () {},\n        onKeyDown: this.fontSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"typing__render\",\n        className: \"typing__render\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"typing__render__char\",\n          className: \"typing__render__char\",\n          children: this.state.ready ? Array.isArray(arrayWordsRender) && arrayWordsRender.length > 0 && arrayWordsRender.map((item, index) => index === 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n            id: \"typing__char\",\n            className: \"typing__char\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"typing__char\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 21\n          }, this)) : \"Loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing__action\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"typing__input\",\n          className: \"typing__action__input\",\n          type: \"text\",\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing__action__counter\",\n          children: this.state.counter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"typing__action__btn__restart\",\n          onClick: this.createWordsArray,\n          children: rsIcon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Typing;","map":{"version":3,"names":["React","Component","words","wordsAmount","countdown","rsIcon","defaultFontSize","Typing","constructor","props","startTimer","setState","start","timer","setInterval","state","counter","clearInterval","result","initValue","prevState","endWhenMax","stringInArrears","string","stringInput","createWordsArray","ready","arrayWords","wordsByLanguage","VN","EN","wordsLength","length","i","random","Math","floor","word","push","count","keystrokes","traslateValue","correct","wrong","declareAndResetClass","typing__render__char","document","getElementById","arrayChar","querySelectorAll","typing_input","style","transform","forEach","item","index","classList","add","remove","focus","value","readOnly","typing","arrayCharLength","getElementTranslate","inputKeypress","e","key","arrayValue","toString","trim","innerText","translateWhenElement","plus","clientWidth","rsValue","removeEventListener","addEventListener","render__typing","span__typing","fontSize","isNaN","target","setLanguage","setUp","bind","componentDidMount","componentWillUnmount","render","arrayWordsRender","Array","isArray","map"],"sources":["C:/typing_trainer/src/component/Typing.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./styles.scss\";\r\nimport {\r\n  words,\r\n  wordsAmount,\r\n  countdown,\r\n  rsIcon,\r\n  defaultFontSize,\r\n} from \"../constant\";\r\n\r\nclass Typing extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrayWords: [],\r\n      counter: countdown,\r\n      start: true,\r\n      ready: false,\r\n      initValue: {\r\n        count: 0,\r\n        keystrokes: 0,\r\n        traslateValue: 0,\r\n        stringInput: \"\",\r\n        correct: 1,\r\n        wrong: 1,\r\n      },\r\n      fontSize: defaultFontSize,\r\n      translateWhenElement: 0,\r\n      VN: true,\r\n    };\r\n    this.setUp = this.setUp.bind(this);\r\n  }\r\n  startTimer = () => {\r\n    this.setState({\r\n      start: false,\r\n    });\r\n    const timer = setInterval(() => {\r\n      if (this.state.counter == 0) {\r\n        clearInterval(timer);\r\n        this.props.result(this.state.initValue);\r\n      } else {\r\n        this.setState((prevState) => {\r\n          return { counter: prevState.counter - 1 };\r\n        });\r\n      }\r\n    }, 1000);\r\n    this.setState({\r\n      timer: timer,\r\n    });\r\n  };\r\n  endWhenMax = (stringInArrears) => {\r\n    clearInterval(this.state.timer);\r\n    let string = this.state.initValue.stringInput + stringInArrears;\r\n    let result = { ...this.state.initValue, stringInput: string };\r\n    this.props.result(result);\r\n  };\r\n  createWordsArray = () => {\r\n    clearInterval(this.state.timer);\r\n    this.setState({\r\n      ready: false,\r\n    });\r\n    const arrayWords = [];\r\n    const wordsByLanguage = this.state.VN ? words.VN : words.EN;\r\n    const wordsLength = wordsByLanguage.length;\r\n    for (var i = 0; i < wordsAmount; i++) {\r\n      const random = Math.floor(Math.random() * wordsLength);\r\n      const word = wordsByLanguage[random];\r\n      arrayWords.push(word);\r\n    }\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      arrayWords: arrayWords,\r\n      counter: countdown,\r\n      start: true,\r\n      ready: true,\r\n      initValue: {\r\n        count: 0,\r\n        keystrokes: 0,\r\n        traslateValue: 0,\r\n        stringInput: \"\",\r\n        correct: 1,\r\n        wrong: 1,\r\n      },\r\n    }));\r\n    this.declareAndResetClass();\r\n  };\r\n  declareAndResetClass = () => {\r\n    const typing__render__char = document.getElementById(\r\n      \"typing__render__char\"\r\n    );\r\n    const arrayChar = document.querySelectorAll(\"span.typing__char\");\r\n    const typing_input = document.getElementById(\"typing__input\");\r\n    typing__render__char.style.transform = \"translate(0px)\";\r\n    arrayChar.forEach((item, index) => {\r\n      if (index === 0) {\r\n        item.classList.add(\"text__active\");\r\n        item.classList.remove(\"incorrect\", \"correct\");\r\n      } else {\r\n        item.classList.remove(\"incorrect\", \"correct\", \"text__active\");\r\n      }\r\n    });\r\n    typing_input.focus();\r\n    typing_input.value = \"\";\r\n    typing_input.readOnly = false;\r\n    return { typing_input, arrayChar, typing__render__char };\r\n  };\r\n  typing = () => {\r\n    const { typing_input, arrayChar, typing__render__char } =\r\n      this.declareAndResetClass();\r\n    const arrayCharLength = wordsAmount;\r\n    this.getElementTranslate();\r\n    const inputKeypress = (e) => {\r\n      if (this.state.start) {\r\n        this.startTimer();\r\n      }\r\n      this.setState((prevState) => ({\r\n        initValue: {\r\n          ...prevState.initValue,\r\n          keystrokes: prevState.initValue.keystrokes + 1,\r\n        },\r\n      }));\r\n      if (typing_input.value) {\r\n        if (e.key === \" \") {\r\n          let arrayValue = typing_input.value.toString().trim();\r\n          if (arrayValue === arrayChar[this.state.initValue.count].innerText) {\r\n            arrayChar[this.state.initValue.count].classList.add(\"correct\");\r\n            this.setState((prevState) => ({\r\n              initValue: {\r\n                ...prevState.initValue,\r\n                correct: prevState.initValue.correct + 1,\r\n              },\r\n            }));\r\n          } else {\r\n            arrayChar[this.state.initValue.count].classList.add(\"incorrect\");\r\n            this.setState((prevState) => ({\r\n              initValue: {\r\n                ...prevState.initValue,\r\n                wrong: prevState.initValue.wrong + 1,\r\n              },\r\n            }));\r\n          }\r\n          arrayChar[this.state.initValue.count].classList.remove(\r\n            \"text__active\"\r\n          );\r\n          arrayChar[this.state.initValue.count + 1].classList.add(\r\n            \"text__active\"\r\n          );\r\n          let stringInput = typing_input.value;\r\n          this.setState((prevState) => ({\r\n            initValue: {\r\n              ...prevState.initValue,\r\n              stringInput: prevState.initValue.stringInput + stringInput,\r\n            },\r\n          }));\r\n\r\n          if (this.state.initValue.count >= this.state.translateWhenElement) {\r\n            let plus = arrayChar[this.state.initValue.count].clientWidth;\r\n            this.setState((prevState) => ({\r\n              initValue: {\r\n                ...prevState.initValue,\r\n                traslateValue: prevState.initValue.traslateValue + plus,\r\n              },\r\n            }));\r\n            typing__render__char.style.transform = `translateX(-${this.state.initValue.traslateValue}px)`;\r\n          }\r\n          if (this.state.initValue.count === arrayCharLength - 1) {\r\n            this.endWhenMax(typing_input.value);\r\n            typing_input.readOnly = true;\r\n            const rsValue = {\r\n              count: 0,\r\n              keystrokes: 0,\r\n              traslateValue: 0,\r\n              stringInput: \"\",\r\n            };\r\n            this.setState({\r\n              initValue: rsValue,\r\n            });\r\n          } else {\r\n            this.setState((prevState) => ({\r\n              initValue: {\r\n                ...prevState.initValue,\r\n                count: prevState.initValue.count + 1,\r\n              },\r\n            }));\r\n          }\r\n          typing_input.value = \"\";\r\n        }\r\n      }\r\n    };\r\n    typing_input.removeEventListener(\"keypress\", inputKeypress);\r\n    typing_input.addEventListener(\"keypress\", inputKeypress);\r\n  };\r\n  getElementTranslate = () => {\r\n    const render__typing = document.getElementById(\"typing__render\");\r\n    const span__typing = document.getElementById(\"typing__char\");\r\n    const translateWhenElement =\r\n      Math.floor(render__typing.clientWidth / 2 / span__typing.clientWidth) - 1;\r\n    this.setState({\r\n      translateWhenElement: translateWhenElement,\r\n    });\r\n  };\r\n  fontSize = (e) => {\r\n    this.getElementTranslate();\r\n    if (e.key === \"ArrowUp\") {\r\n      if (!isNaN(e.target.value)) {\r\n        if (e.target.value < 60) {\r\n          this.setState((prevState) => ({\r\n            fontSize: prevState.fontSize + 1,\r\n          }));\r\n        }\r\n      }\r\n    }\r\n    if (e.key === \"ArrowDown\") {\r\n      if (!isNaN(e.target.value)) {\r\n        if (e.target.value > 14) {\r\n          this.setState((prevState) => ({\r\n            fontSize: prevState.fontSize - 1,\r\n          }));\r\n        }\r\n      }\r\n    }\r\n  };\r\n  async setUp() {\r\n    await this.createWordsArray();\r\n    if (this.state.ready) {\r\n      this.typing();\r\n    }\r\n  }\r\n  setLanguage = () => {\r\n    this.setState((prevState) => ({\r\n      VN: !prevState.VN,\r\n    }));\r\n\r\n    this.createWordsArray();\r\n  };\r\n  componentDidMount() {\r\n    this.setUp();\r\n  }\r\n  componentWillUnmount() {}\r\n  render() {\r\n    const arrayWordsRender = this.state.arrayWords;\r\n    return (\r\n      <div\r\n        className=\"typing\"\r\n        style={{ \"--fontSize\": `${this.state.fontSize}px` }}\r\n      >\r\n        <button onClick={this.setLanguage} className=\"typing__language\">\r\n          {this.state.VN ? \"VN\" : \"EN\"}\r\n        </button>\r\n        <input\r\n          id=\"input__size\"\r\n          type=\"number\"\r\n          className=\"typing__size\"\r\n          value={this.state.fontSize}\r\n          onChange={function () {}}\r\n          onKeyDown={this.fontSize}\r\n        />\r\n        <div id=\"typing__render\" className=\"typing__render\">\r\n          <div id=\"typing__render__char\" className=\"typing__render__char\">\r\n            {this.state.ready\r\n              ? Array.isArray(arrayWordsRender) &&\r\n                arrayWordsRender.length > 0 &&\r\n                arrayWordsRender.map((item, index) =>\r\n                  index === 0 ? (\r\n                    <span\r\n                      key={index}\r\n                      id=\"typing__char\"\r\n                      className=\"typing__char\"\r\n                    >\r\n                      {item}\r\n                    </span>\r\n                  ) : (\r\n                    <span className=\"typing__char\" key={index}>\r\n                      {item}\r\n                    </span>\r\n                  )\r\n                )\r\n              : \"Loading\"}\r\n          </div>\r\n        </div>\r\n        <div className=\"typing__action\">\r\n          <input\r\n            id=\"typing__input\"\r\n            className=\"typing__action__input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n          />\r\n          <div className=\"typing__action__counter\">{this.state.counter}</div>\r\n          <button\r\n            className=\"typing__action__btn__restart\"\r\n            onClick={this.createWordsArray}\r\n          >\r\n            {rsIcon}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Typing;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,eAAP;AACA,SACEC,KADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,eALF,QAMO,aANP;;;AAQA,MAAMC,MAAN,SAAqBN,SAArB,CAA+B;EAC7BO,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAqBnBC,UArBmB,GAqBN,MAAM;MACjB,KAAKC,QAAL,CAAc;QACZC,KAAK,EAAE;MADK,CAAd;MAGA,MAAMC,KAAK,GAAGC,WAAW,CAAC,MAAM;QAC9B,IAAI,KAAKC,KAAL,CAAWC,OAAX,IAAsB,CAA1B,EAA6B;UAC3BC,aAAa,CAACJ,KAAD,CAAb;UACA,KAAKJ,KAAL,CAAWS,MAAX,CAAkB,KAAKH,KAAL,CAAWI,SAA7B;QACD,CAHD,MAGO;UACL,KAAKR,QAAL,CAAeS,SAAD,IAAe;YAC3B,OAAO;cAAEJ,OAAO,EAAEI,SAAS,CAACJ,OAAV,GAAoB;YAA/B,CAAP;UACD,CAFD;QAGD;MACF,CATwB,EAStB,IATsB,CAAzB;MAUA,KAAKL,QAAL,CAAc;QACZE,KAAK,EAAEA;MADK,CAAd;IAGD,CAtCkB;;IAAA,KAuCnBQ,UAvCmB,GAuCLC,eAAD,IAAqB;MAChCL,aAAa,CAAC,KAAKF,KAAL,CAAWF,KAAZ,CAAb;MACA,IAAIU,MAAM,GAAG,KAAKR,KAAL,CAAWI,SAAX,CAAqBK,WAArB,GAAmCF,eAAhD;MACA,IAAIJ,MAAM,GAAG,EAAE,GAAG,KAAKH,KAAL,CAAWI,SAAhB;QAA2BK,WAAW,EAAED;MAAxC,CAAb;MACA,KAAKd,KAAL,CAAWS,MAAX,CAAkBA,MAAlB;IACD,CA5CkB;;IAAA,KA6CnBO,gBA7CmB,GA6CA,MAAM;MACvBR,aAAa,CAAC,KAAKF,KAAL,CAAWF,KAAZ,CAAb;MACA,KAAKF,QAAL,CAAc;QACZe,KAAK,EAAE;MADK,CAAd;MAGA,MAAMC,UAAU,GAAG,EAAnB;MACA,MAAMC,eAAe,GAAG,KAAKb,KAAL,CAAWc,EAAX,GAAgB3B,KAAK,CAAC2B,EAAtB,GAA2B3B,KAAK,CAAC4B,EAAzD;MACA,MAAMC,WAAW,GAAGH,eAAe,CAACI,MAApC;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9B,WAApB,EAAiC8B,CAAC,EAAlC,EAAsC;QACpC,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgBH,WAA3B,CAAf;QACA,MAAMM,IAAI,GAAGT,eAAe,CAACM,MAAD,CAA5B;QACAP,UAAU,CAACW,IAAX,CAAgBD,IAAhB;MACD;;MACD,KAAK1B,QAAL,CAAeS,SAAD,KAAgB,EAC5B,GAAGA,SADyB;QAE5BO,UAAU,EAAEA,UAFgB;QAG5BX,OAAO,EAAEZ,SAHmB;QAI5BQ,KAAK,EAAE,IAJqB;QAK5Bc,KAAK,EAAE,IALqB;QAM5BP,SAAS,EAAE;UACToB,KAAK,EAAE,CADE;UAETC,UAAU,EAAE,CAFH;UAGTC,aAAa,EAAE,CAHN;UAITjB,WAAW,EAAE,EAJJ;UAKTkB,OAAO,EAAE,CALA;UAMTC,KAAK,EAAE;QANE;MANiB,CAAhB,CAAd;MAeA,KAAKC,oBAAL;IACD,CA1EkB;;IAAA,KA2EnBA,oBA3EmB,GA2EI,MAAM;MAC3B,MAAMC,oBAAoB,GAAGC,QAAQ,CAACC,cAAT,CAC3B,sBAD2B,CAA7B;MAGA,MAAMC,SAAS,GAAGF,QAAQ,CAACG,gBAAT,CAA0B,mBAA1B,CAAlB;MACA,MAAMC,YAAY,GAAGJ,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAArB;MACAF,oBAAoB,CAACM,KAArB,CAA2BC,SAA3B,GAAuC,gBAAvC;MACAJ,SAAS,CAACK,OAAV,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAAiB;QACjC,IAAIA,KAAK,KAAK,CAAd,EAAiB;UACfD,IAAI,CAACE,SAAL,CAAeC,GAAf,CAAmB,cAAnB;UACAH,IAAI,CAACE,SAAL,CAAeE,MAAf,CAAsB,WAAtB,EAAmC,SAAnC;QACD,CAHD,MAGO;UACLJ,IAAI,CAACE,SAAL,CAAeE,MAAf,CAAsB,WAAtB,EAAmC,SAAnC,EAA8C,cAA9C;QACD;MACF,CAPD;MAQAR,YAAY,CAACS,KAAb;MACAT,YAAY,CAACU,KAAb,GAAqB,EAArB;MACAV,YAAY,CAACW,QAAb,GAAwB,KAAxB;MACA,OAAO;QAAEX,YAAF;QAAgBF,SAAhB;QAA2BH;MAA3B,CAAP;IACD,CA9FkB;;IAAA,KA+FnBiB,MA/FmB,GA+FV,MAAM;MACb,MAAM;QAAEZ,YAAF;QAAgBF,SAAhB;QAA2BH;MAA3B,IACJ,KAAKD,oBAAL,EADF;MAEA,MAAMmB,eAAe,GAAG5D,WAAxB;MACA,KAAK6D,mBAAL;;MACA,MAAMC,aAAa,GAAIC,CAAD,IAAO;QAC3B,IAAI,KAAKnD,KAAL,CAAWH,KAAf,EAAsB;UACpB,KAAKF,UAAL;QACD;;QACD,KAAKC,QAAL,CAAeS,SAAD,KAAgB;UAC5BD,SAAS,EAAE,EACT,GAAGC,SAAS,CAACD,SADJ;YAETqB,UAAU,EAAEpB,SAAS,CAACD,SAAV,CAAoBqB,UAApB,GAAiC;UAFpC;QADiB,CAAhB,CAAd;;QAMA,IAAIU,YAAY,CAACU,KAAjB,EAAwB;UACtB,IAAIM,CAAC,CAACC,GAAF,KAAU,GAAd,EAAmB;YACjB,IAAIC,UAAU,GAAGlB,YAAY,CAACU,KAAb,CAAmBS,QAAnB,GAA8BC,IAA9B,EAAjB;;YACA,IAAIF,UAAU,KAAKpB,SAAS,CAAC,KAAKjC,KAAL,CAAWI,SAAX,CAAqBoB,KAAtB,CAAT,CAAsCgC,SAAzD,EAAoE;cAClEvB,SAAS,CAAC,KAAKjC,KAAL,CAAWI,SAAX,CAAqBoB,KAAtB,CAAT,CAAsCiB,SAAtC,CAAgDC,GAAhD,CAAoD,SAApD;cACA,KAAK9C,QAAL,CAAeS,SAAD,KAAgB;gBAC5BD,SAAS,EAAE,EACT,GAAGC,SAAS,CAACD,SADJ;kBAETuB,OAAO,EAAEtB,SAAS,CAACD,SAAV,CAAoBuB,OAApB,GAA8B;gBAF9B;cADiB,CAAhB,CAAd;YAMD,CARD,MAQO;cACLM,SAAS,CAAC,KAAKjC,KAAL,CAAWI,SAAX,CAAqBoB,KAAtB,CAAT,CAAsCiB,SAAtC,CAAgDC,GAAhD,CAAoD,WAApD;cACA,KAAK9C,QAAL,CAAeS,SAAD,KAAgB;gBAC5BD,SAAS,EAAE,EACT,GAAGC,SAAS,CAACD,SADJ;kBAETwB,KAAK,EAAEvB,SAAS,CAACD,SAAV,CAAoBwB,KAApB,GAA4B;gBAF1B;cADiB,CAAhB,CAAd;YAMD;;YACDK,SAAS,CAAC,KAAKjC,KAAL,CAAWI,SAAX,CAAqBoB,KAAtB,CAAT,CAAsCiB,SAAtC,CAAgDE,MAAhD,CACE,cADF;YAGAV,SAAS,CAAC,KAAKjC,KAAL,CAAWI,SAAX,CAAqBoB,KAArB,GAA6B,CAA9B,CAAT,CAA0CiB,SAA1C,CAAoDC,GAApD,CACE,cADF;YAGA,IAAIjC,WAAW,GAAG0B,YAAY,CAACU,KAA/B;YACA,KAAKjD,QAAL,CAAeS,SAAD,KAAgB;cAC5BD,SAAS,EAAE,EACT,GAAGC,SAAS,CAACD,SADJ;gBAETK,WAAW,EAAEJ,SAAS,CAACD,SAAV,CAAoBK,WAApB,GAAkCA;cAFtC;YADiB,CAAhB,CAAd;;YAOA,IAAI,KAAKT,KAAL,CAAWI,SAAX,CAAqBoB,KAArB,IAA8B,KAAKxB,KAAL,CAAWyD,oBAA7C,EAAmE;cACjE,IAAIC,IAAI,GAAGzB,SAAS,CAAC,KAAKjC,KAAL,CAAWI,SAAX,CAAqBoB,KAAtB,CAAT,CAAsCmC,WAAjD;cACA,KAAK/D,QAAL,CAAeS,SAAD,KAAgB;gBAC5BD,SAAS,EAAE,EACT,GAAGC,SAAS,CAACD,SADJ;kBAETsB,aAAa,EAAErB,SAAS,CAACD,SAAV,CAAoBsB,aAApB,GAAoCgC;gBAF1C;cADiB,CAAhB,CAAd;cAMA5B,oBAAoB,CAACM,KAArB,CAA2BC,SAA3B,GAAwC,eAAc,KAAKrC,KAAL,CAAWI,SAAX,CAAqBsB,aAAc,KAAzF;YACD;;YACD,IAAI,KAAK1B,KAAL,CAAWI,SAAX,CAAqBoB,KAArB,KAA+BwB,eAAe,GAAG,CAArD,EAAwD;cACtD,KAAK1C,UAAL,CAAgB6B,YAAY,CAACU,KAA7B;cACAV,YAAY,CAACW,QAAb,GAAwB,IAAxB;cACA,MAAMc,OAAO,GAAG;gBACdpC,KAAK,EAAE,CADO;gBAEdC,UAAU,EAAE,CAFE;gBAGdC,aAAa,EAAE,CAHD;gBAIdjB,WAAW,EAAE;cAJC,CAAhB;cAMA,KAAKb,QAAL,CAAc;gBACZQ,SAAS,EAAEwD;cADC,CAAd;YAGD,CAZD,MAYO;cACL,KAAKhE,QAAL,CAAeS,SAAD,KAAgB;gBAC5BD,SAAS,EAAE,EACT,GAAGC,SAAS,CAACD,SADJ;kBAEToB,KAAK,EAAEnB,SAAS,CAACD,SAAV,CAAoBoB,KAApB,GAA4B;gBAF1B;cADiB,CAAhB,CAAd;YAMD;;YACDW,YAAY,CAACU,KAAb,GAAqB,EAArB;UACD;QACF;MACF,CA7ED;;MA8EAV,YAAY,CAAC0B,mBAAb,CAAiC,UAAjC,EAA6CX,aAA7C;MACAf,YAAY,CAAC2B,gBAAb,CAA8B,UAA9B,EAA0CZ,aAA1C;IACD,CApLkB;;IAAA,KAqLnBD,mBArLmB,GAqLG,MAAM;MAC1B,MAAMc,cAAc,GAAGhC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAvB;MACA,MAAMgC,YAAY,GAAGjC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAArB;MACA,MAAMyB,oBAAoB,GACxBrC,IAAI,CAACC,KAAL,CAAW0C,cAAc,CAACJ,WAAf,GAA6B,CAA7B,GAAiCK,YAAY,CAACL,WAAzD,IAAwE,CAD1E;MAEA,KAAK/D,QAAL,CAAc;QACZ6D,oBAAoB,EAAEA;MADV,CAAd;IAGD,CA7LkB;;IAAA,KA8LnBQ,QA9LmB,GA8LPd,CAAD,IAAO;MAChB,KAAKF,mBAAL;;MACA,IAAIE,CAAC,CAACC,GAAF,KAAU,SAAd,EAAyB;QACvB,IAAI,CAACc,KAAK,CAACf,CAAC,CAACgB,MAAF,CAAStB,KAAV,CAAV,EAA4B;UAC1B,IAAIM,CAAC,CAACgB,MAAF,CAAStB,KAAT,GAAiB,EAArB,EAAyB;YACvB,KAAKjD,QAAL,CAAeS,SAAD,KAAgB;cAC5B4D,QAAQ,EAAE5D,SAAS,CAAC4D,QAAV,GAAqB;YADH,CAAhB,CAAd;UAGD;QACF;MACF;;MACD,IAAId,CAAC,CAACC,GAAF,KAAU,WAAd,EAA2B;QACzB,IAAI,CAACc,KAAK,CAACf,CAAC,CAACgB,MAAF,CAAStB,KAAV,CAAV,EAA4B;UAC1B,IAAIM,CAAC,CAACgB,MAAF,CAAStB,KAAT,GAAiB,EAArB,EAAyB;YACvB,KAAKjD,QAAL,CAAeS,SAAD,KAAgB;cAC5B4D,QAAQ,EAAE5D,SAAS,CAAC4D,QAAV,GAAqB;YADH,CAAhB,CAAd;UAGD;QACF;MACF;IACF,CAlNkB;;IAAA,KAyNnBG,WAzNmB,GAyNL,MAAM;MAClB,KAAKxE,QAAL,CAAeS,SAAD,KAAgB;QAC5BS,EAAE,EAAE,CAACT,SAAS,CAACS;MADa,CAAhB,CAAd;MAIA,KAAKJ,gBAAL;IACD,CA/NkB;;IAEjB,KAAKV,KAAL,GAAa;MACXY,UAAU,EAAE,EADD;MAEXX,OAAO,EAAEZ,SAFE;MAGXQ,KAAK,EAAE,IAHI;MAIXc,KAAK,EAAE,KAJI;MAKXP,SAAS,EAAE;QACToB,KAAK,EAAE,CADE;QAETC,UAAU,EAAE,CAFH;QAGTC,aAAa,EAAE,CAHN;QAITjB,WAAW,EAAE,EAJJ;QAKTkB,OAAO,EAAE,CALA;QAMTC,KAAK,EAAE;MANE,CALA;MAaXqC,QAAQ,EAAE1E,eAbC;MAcXkE,oBAAoB,EAAE,CAdX;MAeX3C,EAAE,EAAE;IAfO,CAAb;IAiBA,KAAKuD,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;EACD;;EA+LU,MAALD,KAAK,GAAG;IACZ,MAAM,KAAK3D,gBAAL,EAAN;;IACA,IAAI,KAAKV,KAAL,CAAWW,KAAf,EAAsB;MACpB,KAAKoC,MAAL;IACD;EACF;;EAQDwB,iBAAiB,GAAG;IAClB,KAAKF,KAAL;EACD;;EACDG,oBAAoB,GAAG,CAAE;;EACzBC,MAAM,GAAG;IACP,MAAMC,gBAAgB,GAAG,KAAK1E,KAAL,CAAWY,UAApC;IACA,oBACE;MACE,SAAS,EAAC,QADZ;MAEE,KAAK,EAAE;QAAE,cAAe,GAAE,KAAKZ,KAAL,CAAWiE,QAAS;MAAvC,CAFT;MAAA,wBAIE;QAAQ,OAAO,EAAE,KAAKG,WAAtB;QAAmC,SAAS,EAAC,kBAA7C;QAAA,UACG,KAAKpE,KAAL,CAAWc,EAAX,GAAgB,IAAhB,GAAuB;MAD1B;QAAA;QAAA;QAAA;MAAA,QAJF,eAOE;QACE,EAAE,EAAC,aADL;QAEE,IAAI,EAAC,QAFP;QAGE,SAAS,EAAC,cAHZ;QAIE,KAAK,EAAE,KAAKd,KAAL,CAAWiE,QAJpB;QAKE,QAAQ,EAAE,YAAY,CAAE,CAL1B;QAME,SAAS,EAAE,KAAKA;MANlB;QAAA;QAAA;QAAA;MAAA,QAPF,eAeE;QAAK,EAAE,EAAC,gBAAR;QAAyB,SAAS,EAAC,gBAAnC;QAAA,uBACE;UAAK,EAAE,EAAC,sBAAR;UAA+B,SAAS,EAAC,sBAAzC;UAAA,UACG,KAAKjE,KAAL,CAAWW,KAAX,GACGgE,KAAK,CAACC,OAAN,CAAcF,gBAAd,KACAA,gBAAgB,CAACzD,MAAjB,GAA0B,CAD1B,IAEAyD,gBAAgB,CAACG,GAAjB,CAAqB,CAACtC,IAAD,EAAOC,KAAP,KACnBA,KAAK,KAAK,CAAV,gBACE;YAEE,EAAE,EAAC,cAFL;YAGE,SAAS,EAAC,cAHZ;YAAA,UAKGD;UALH,GACOC,KADP;YAAA;YAAA;YAAA;UAAA,QADF,gBASE;YAAM,SAAS,EAAC,cAAhB;YAAA,UACGD;UADH,GAAoCC,KAApC;YAAA;YAAA;YAAA;UAAA,QAVJ,CAHH,GAkBG;QAnBN;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAfF,eAsCE;QAAK,SAAS,EAAC,gBAAf;QAAA,wBACE;UACE,EAAE,EAAC,eADL;UAEE,SAAS,EAAC,uBAFZ;UAGE,IAAI,EAAC,MAHP;UAIE,YAAY,EAAC;QAJf;UAAA;UAAA;UAAA;QAAA,QADF,eAOE;UAAK,SAAS,EAAC,yBAAf;UAAA,UAA0C,KAAKxC,KAAL,CAAWC;QAArD;UAAA;UAAA;UAAA;QAAA,QAPF,eAQE;UACE,SAAS,EAAC,8BADZ;UAEE,OAAO,EAAE,KAAKS,gBAFhB;UAAA,UAIGpB;QAJH;UAAA;UAAA;UAAA;QAAA,QARF;MAAA;QAAA;QAAA;QAAA;MAAA,QAtCF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAwDD;;AA/R4B;;AAkS/B,eAAeE,MAAf"},"metadata":{},"sourceType":"module"}