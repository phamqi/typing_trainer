{"ast":null,"code":"var _jsxFileName = \"C:\\\\typing_trainer\\\\src\\\\component\\\\Typing.jsx\";\nimport React, { Component } from \"react\";\nimport \"./styles.scss\";\nimport { vocabulary, wordsAmount, countdown, rsIcon } from \"../constant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Typing extends Component {\n  constructor(props) {\n    super(props);\n\n    this.startTimer = () => {\n      this.setState({\n        start: false\n      });\n      const timer = setInterval(() => {\n        if (this.state.counter == 0) {\n          clearInterval(timer);\n          this.props.result(this.state.initValue);\n        } else {\n          this.setState(prevState => {\n            return {\n              counter: prevState.counter - 1\n            };\n          });\n        }\n      }, 1000);\n      this.setState({\n        timer: timer\n      });\n    };\n\n    this.endWhenMax = stringInArrears => {\n      clearInterval(this.state.timer);\n      let string = this.state.initValue.stringInput + stringInArrears;\n      let result = { ...this.state.initValue,\n        stringInput: string\n      };\n      this.props.result(result);\n    };\n\n    this.initWords = () => {\n      let arrayWords = [];\n      let wordsLength = vocabulary.length;\n      let random, word;\n\n      for (var i = 0; i < wordsAmount; i++) {\n        random = Math.floor(Math.random() * wordsLength);\n        word = vocabulary[random];\n        arrayWords.push(word);\n      }\n\n      clearInterval(this.state.timer);\n      this.setState({\n        arrayWords: arrayWords,\n        counter: countdown,\n        start: true,\n        ready: true,\n        initValue: {\n          count: 0,\n          keystrokes: 0,\n          traslateValue: 0,\n          stringInput: \"\",\n          correct: 0,\n          wrong: 0\n        }\n      });\n    };\n\n    this.typing = () => {\n      const typing__render = document.getElementById(\"typing__render\");\n      const typing__render__char = document.getElementById(\"typing__render__char\");\n      const arrayChar = document.querySelectorAll(\"span.typing__char\");\n      const typing_input = document.getElementById(\"typing__input\");\n      typing__render__char.style.transform = \"translate(0px)\";\n      arrayChar.forEach(item => {\n        item.classList.remove(\"incorrect\", \"correct\", \"text_active\");\n      });\n      typing_input.focus();\n      typing_input.value = \"\";\n      typing_input.readOnly = false;\n      let translateWhenElement = Math.floor(typing__render.clientWidth / 2 / arrayChar[0].clientWidth);\n      let arrayCharLength = arrayChar.length;\n      arrayChar[this.state.initValue.count].classList.add(\"text_active\");\n      typing_input.addEventListener(\"keypress\", e => {\n        if (this.state.start) {\n          this.startTimer();\n        }\n\n        this.setState(prevState => ({\n          initValue: { ...prevState.initValue,\n            keystrokes: prevState.initValue.keystrokes + 1\n          }\n        }));\n\n        if (typing_input.value) {\n          if (e.key == \" \") {\n            let arrayValue = typing_input.value.toString().trim();\n            let stringInput = typing_input.value;\n            this.setState(prevState => ({\n              initValue: { ...prevState.initValue,\n                stringInput: prevState.initValue.stringInput + stringInput\n              }\n            }));\n\n            if (arrayValue == arrayChar[this.state.initValue.count].innerText) {\n              arrayChar[this.state.initValue.count].classList.add(\"correct\");\n              this.setState(prevState => ({\n                initValue: { ...prevState.initValue,\n                  correct: prevState.initValue.correct + 1\n                }\n              }));\n            } else {\n              arrayChar[this.state.initValue.count].classList.add(\"incorrect\");\n              this.setState(prevState => ({\n                initValue: { ...prevState.initValue,\n                  wrong: prevState.initValue.wrong + 1\n                }\n              }));\n            }\n\n            if (this.state.initValue.count >= translateWhenElement) {\n              let plus = arrayChar[this.state.initValue.count].clientWidth;\n              this.setState(prevState => ({\n                initValue: { ...prevState.initValue,\n                  traslateValue: prevState.initValue.traslateValue + plus\n                }\n              }));\n              typing__render__char.style.transform = `translateX(-${this.state.initValue.traslateValue}px)`;\n            }\n\n            if (this.state.initValue.count == arrayCharLength - 1) {\n              arrayChar[this.state.initValue.count].classList.remove(\"text_active\");\n              this.endWhenMax(typing_input.value);\n              typing_input.readOnly = true;\n              const rsValue = {\n                count: 0,\n                keystrokes: 0,\n                traslateValue: 0,\n                stringInput: \"\"\n              };\n              this.setState({\n                initValue: rsValue\n              });\n            } else {\n              arrayChar[this.state.initValue.count].classList.remove(\"text_active\");\n              arrayChar[this.state.initValue.count + 1].classList.add(\"text_active\");\n              this.setState(prevState => ({\n                initValue: { ...prevState.initValue,\n                  count: prevState.initValue.count + 1\n                }\n              }));\n            }\n\n            typing_input.value = \"\";\n          }\n        }\n      });\n    };\n\n    this.state = {\n      arrayWords: [],\n      counter: countdown,\n      start: true,\n      ready: false,\n      initValue: {\n        count: 0,\n        keystrokes: 0,\n        traslateValue: 0,\n        stringInput: \"\",\n        correct: 0,\n        wrong: 0\n      }\n    };\n    this.setUp = this.setUp.bind(this);\n  }\n\n  async setUp() {\n    await this.initWords();\n\n    if (this.state.ready) {\n      this.typing(0, 0, 0, \"\");\n    }\n  }\n\n  componentDidMount() {\n    this.setUp();\n  }\n\n  componentDidUpdate() {}\n\n  render() {\n    let arrayWordsRender = this.state.arrayWords;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"typing__render\",\n        className: \"typing__render\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"typing__render__char\",\n          className: \"typing__render__char\",\n          style: {\n            \"--margin-char\": \"5px\",\n            \"--fontSize-char\": \"17px\"\n          },\n          children: Array.isArray(arrayWordsRender) && arrayWordsRender.length > 0 && arrayWordsRender.map((item, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"typing__char\",\n            children: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing__action\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"typing__input\",\n          className: \"typing__action__input\",\n          type: \"text\",\n          style: {\n            \"--fontSize-input\": \"17px\"\n          },\n          autoComplete: \"off\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing__action__counter\",\n          children: this.state.counter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"typing__action__btn__restart\",\n          onClick: () => this.setUp(),\n          children: rsIcon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Typing;","map":{"version":3,"names":["React","Component","vocabulary","wordsAmount","countdown","rsIcon","Typing","constructor","props","startTimer","setState","start","timer","setInterval","state","counter","clearInterval","result","initValue","prevState","endWhenMax","stringInArrears","string","stringInput","initWords","arrayWords","wordsLength","length","random","word","i","Math","floor","push","ready","count","keystrokes","traslateValue","correct","wrong","typing","typing__render","document","getElementById","typing__render__char","arrayChar","querySelectorAll","typing_input","style","transform","forEach","item","classList","remove","focus","value","readOnly","translateWhenElement","clientWidth","arrayCharLength","add","addEventListener","e","key","arrayValue","toString","trim","innerText","plus","rsValue","setUp","bind","componentDidMount","componentDidUpdate","render","arrayWordsRender","Array","isArray","map","index"],"sources":["C:/typing_trainer/src/component/Typing.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./styles.scss\";\r\nimport { vocabulary, wordsAmount, countdown, rsIcon } from \"../constant\";\r\n\r\nclass Typing extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arrayWords: [],\r\n      counter: countdown,\r\n      start: true,\r\n      ready: false,\r\n      initValue: {\r\n        count: 0,\r\n        keystrokes: 0,\r\n        traslateValue: 0,\r\n        stringInput: \"\",\r\n        correct: 0,\r\n        wrong: 0,\r\n      },\r\n    };\r\n    this.setUp = this.setUp.bind(this);\r\n  }\r\n  startTimer = () => {\r\n    this.setState({\r\n      start: false,\r\n    });\r\n    const timer = setInterval(() => {\r\n      if (this.state.counter == 0) {\r\n        clearInterval(timer);\r\n        this.props.result(this.state.initValue);\r\n      } else {\r\n        this.setState((prevState) => {\r\n          return { counter: prevState.counter - 1 };\r\n        });\r\n      }\r\n    }, 1000);\r\n    this.setState({\r\n      timer: timer,\r\n    });\r\n  };\r\n  endWhenMax = (stringInArrears) => {\r\n    clearInterval(this.state.timer);\r\n    let string = this.state.initValue.stringInput + stringInArrears;\r\n    let result = { ...this.state.initValue, stringInput: string };\r\n    this.props.result(result);\r\n  };\r\n  initWords = () => {\r\n    let arrayWords = [];\r\n    let wordsLength = vocabulary.length;\r\n    let random, word;\r\n    for (var i = 0; i < wordsAmount; i++) {\r\n      random = Math.floor(Math.random() * wordsLength);\r\n      word = vocabulary[random];\r\n      arrayWords.push(word);\r\n    }\r\n    clearInterval(this.state.timer);\r\n    this.setState({\r\n      arrayWords: arrayWords,\r\n      counter: countdown,\r\n      start: true,\r\n      ready: true,\r\n      initValue: {\r\n        count: 0,\r\n        keystrokes: 0,\r\n        traslateValue: 0,\r\n        stringInput: \"\",\r\n        correct: 0,\r\n        wrong: 0,\r\n      },\r\n    });\r\n  };\r\n  typing = () => {\r\n    const typing__render = document.getElementById(\"typing__render\");\r\n    const typing__render__char = document.getElementById(\r\n      \"typing__render__char\"\r\n    );\r\n    const arrayChar = document.querySelectorAll(\"span.typing__char\");\r\n    const typing_input = document.getElementById(\"typing__input\");\r\n\r\n    typing__render__char.style.transform = \"translate(0px)\";\r\n    arrayChar.forEach((item) => {\r\n      item.classList.remove(\"incorrect\", \"correct\", \"text_active\");\r\n    });\r\n    typing_input.focus();\r\n    typing_input.value = \"\";\r\n    typing_input.readOnly = false;\r\n\r\n    let translateWhenElement = Math.floor(\r\n      typing__render.clientWidth / 2 / arrayChar[0].clientWidth\r\n    );\r\n    let arrayCharLength = arrayChar.length;\r\n\r\n    arrayChar[this.state.initValue.count].classList.add(\"text_active\");\r\n    typing_input.addEventListener(\"keypress\", (e) => {\r\n      if (this.state.start) {\r\n        this.startTimer();\r\n      }\r\n      this.setState((prevState) => ({\r\n        initValue: {\r\n          ...prevState.initValue,\r\n          keystrokes: prevState.initValue.keystrokes + 1,\r\n        },\r\n      }));\r\n\r\n      if (typing_input.value) {\r\n        if (e.key == \" \") {\r\n          let arrayValue = typing_input.value.toString().trim();\r\n          let stringInput = typing_input.value;\r\n          this.setState((prevState) => ({\r\n            initValue: {\r\n              ...prevState.initValue,\r\n              stringInput: prevState.initValue.stringInput + stringInput,\r\n            },\r\n          }));\r\n          if (arrayValue == arrayChar[this.state.initValue.count].innerText) {\r\n            arrayChar[this.state.initValue.count].classList.add(\"correct\");\r\n            this.setState((prevState) => ({\r\n              initValue: {\r\n                ...prevState.initValue,\r\n                correct: prevState.initValue.correct + 1,\r\n              },\r\n            }));\r\n          } else {\r\n            arrayChar[this.state.initValue.count].classList.add(\"incorrect\");\r\n            this.setState((prevState) => ({\r\n              initValue: {\r\n                ...prevState.initValue,\r\n                wrong: prevState.initValue.wrong + 1,\r\n              },\r\n            }));\r\n          }\r\n\r\n          if (this.state.initValue.count >= translateWhenElement) {\r\n            let plus = arrayChar[this.state.initValue.count].clientWidth;\r\n            this.setState((prevState) => ({\r\n              initValue: {\r\n                ...prevState.initValue,\r\n                traslateValue: prevState.initValue.traslateValue + plus,\r\n              },\r\n            }));\r\n            typing__render__char.style.transform = `translateX(-${this.state.initValue.traslateValue}px)`;\r\n          }\r\n          if (this.state.initValue.count == arrayCharLength - 1) {\r\n            arrayChar[this.state.initValue.count].classList.remove(\r\n              \"text_active\"\r\n            );\r\n            this.endWhenMax(typing_input.value);\r\n            typing_input.readOnly = true;\r\n            const rsValue = {\r\n              count: 0,\r\n              keystrokes: 0,\r\n              traslateValue: 0,\r\n              stringInput: \"\",\r\n            };\r\n            this.setState({\r\n              initValue: rsValue,\r\n            });\r\n          } else {\r\n            arrayChar[this.state.initValue.count].classList.remove(\r\n              \"text_active\"\r\n            );\r\n            arrayChar[this.state.initValue.count + 1].classList.add(\r\n              \"text_active\"\r\n            );\r\n            this.setState((prevState) => ({\r\n              initValue: {\r\n                ...prevState.initValue,\r\n                count: prevState.initValue.count + 1,\r\n              },\r\n            }));\r\n          }\r\n          typing_input.value = \"\";\r\n        }\r\n      }\r\n    });\r\n  };\r\n  async setUp() {\r\n    await this.initWords();\r\n    if (this.state.ready) {\r\n      this.typing(0, 0, 0, \"\");\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.setUp();\r\n  }\r\n\r\n  componentDidUpdate() {}\r\n  render() {\r\n    let arrayWordsRender = this.state.arrayWords;\r\n    return (\r\n      <div className=\"typing\">\r\n        <div id=\"typing__render\" className=\"typing__render\">\r\n          <div\r\n            id=\"typing__render__char\"\r\n            className=\"typing__render__char\"\r\n            style={{ \"--margin-char\": \"5px\", \"--fontSize-char\": \"17px\" }}\r\n          >\r\n            {Array.isArray(arrayWordsRender) &&\r\n              arrayWordsRender.length > 0 &&\r\n              arrayWordsRender.map((item, index) => (\r\n                <span className=\"typing__char\" key={index}>\r\n                  {item}\r\n                </span>\r\n              ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"typing__action\">\r\n          <input\r\n            id=\"typing__input\"\r\n            className=\"typing__action__input\"\r\n            type=\"text\"\r\n            style={{ \"--fontSize-input\": \"17px\" }}\r\n            autoComplete=\"off\"\r\n          />\r\n          <div className=\"typing__action__counter\">{this.state.counter}</div>\r\n          <button\r\n            className=\"typing__action__btn__restart\"\r\n            onClick={() => this.setUp()}\r\n          >\r\n            {rsIcon}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Typing;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}